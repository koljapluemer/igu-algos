{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Igu Algos Welcome to the docs.","title":"Igu Algos"},{"location":"#igu-algos","text":"Welcome to the docs.","title":"Igu Algos"},{"location":"development/how-to-build-documentation/","text":"How to Build Documentation We have doc strings, and we have manually written markdown documentation. DocStrings As you can see in How to Inline-Document , code is documented with docstrings following a minimal JSDoc spec This documentation is pulled together as markdown files into docs/reference by typedoc This process happens when we run npm run doc Manual MD We also have development documentation such as this, as wall as explanations, tutorials, and how-tos (following diataxis paradigm) written in plain markdown files that live in the respective docs/ folders These are made into a static site by mkdocs (the only reason that there's python in this project) This build happens also when we run npm run doc (this requires the python setup, being in .venv and all that) We also have to push the doc to gh pages, which is done by the magic command mkdocs gh-deploy --clean","title":"How to Build Documentation"},{"location":"development/how-to-build-documentation/#how-to-build-documentation","text":"We have doc strings, and we have manually written markdown documentation.","title":"How to Build Documentation"},{"location":"development/how-to-build-documentation/#docstrings","text":"As you can see in How to Inline-Document , code is documented with docstrings following a minimal JSDoc spec This documentation is pulled together as markdown files into docs/reference by typedoc This process happens when we run npm run doc","title":"DocStrings"},{"location":"development/how-to-build-documentation/#manual-md","text":"We also have development documentation such as this, as wall as explanations, tutorials, and how-tos (following diataxis paradigm) written in plain markdown files that live in the respective docs/ folders These are made into a static site by mkdocs (the only reason that there's python in this project) This build happens also when we run npm run doc (this requires the python setup, being in .venv and all that) We also have to push the doc to gh pages, which is done by the magic command mkdocs gh-deploy --clean","title":"Manual MD"},{"location":"development/how-to-inline-document/","text":"How to Inline-Document each class, function, type etc. should have a one or two line doc-string description of what they do this documentation should say something that is NOT already clear from the name of the class or function doc strings are in JS Doc syntac (but since we're using typescript, ts types \"document\" returns and params) for this reason, DO NOT use @params or @returns unless there is something super important to say about a parameter existence of doc strings is enforced at pre-commit (via husky ) on error level","title":"How to Inline-Document"},{"location":"development/how-to-inline-document/#how-to-inline-document","text":"each class, function, type etc. should have a one or two line doc-string description of what they do this documentation should say something that is NOT already clear from the name of the class or function doc strings are in JS Doc syntac (but since we're using typescript, ts types \"document\" returns and params) for this reason, DO NOT use @params or @returns unless there is something super important to say about a parameter existence of doc strings is enforced at pre-commit (via husky ) on error level","title":"How to Inline-Document"},{"location":"explanations/learning-goals/","text":"","title":"Learning goals"},{"location":"how-to/how-to-make-lessons-from-json/","text":"How to Create Lesson s from JSON data files Assumptions You have learning goals represented in a well-structured JSON, such as this: { \"pitcairn-is.-main\": { \"name\": \"Know where Pitcairn Is. is\", \"isLesson\": true, \"associatedLearningGoals\": [ \"pitcairn-is.-1\" ], \"data\": { \"country\": \"Pitcairn Is.\" } }, \"pitcairn-is.-1\": { \"name\": \"Find Pitcairn Is. on the worldmap\", \"isLesson\": false, \"data\": { \"country\": \"Pitcairn Is.\" } }, \"barbados-main\": { \"name\": \"Know where Barbados is\", \"isLesson\": true, \"associatedLearningGoals\": [ \"barbados-1\", \"barbados-2\", \"barbados-3\" ], \"data\": { \"country\": \"Barbados\" } }, \"barbados-1\": { \"name\": \"Find Barbados on the worldmap\", \"isLesson\": false, \"data\": { \"country\": \"Barbados\" } } } You have exercise templates represented in a well-structured JSON which looks like this: { \"pitcairn-is.-1\": { \"belongsTo\": \"pitcairn-is.-1\", \"instruction\": \"$task_pre Pitcairn Is. $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"SINGLE\" } }, \"data\": { \"zoom\": 100 } }, \"barbados-1\": { \"belongsTo\": \"barbados-1\", \"instruction\": \"$task_pre Barbados $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"SINGLE\" } }, \"data\": { \"zoom\": 100 } }, \"barbados-2\": { \"belongsTo\": \"barbados-2\", \"instruction\": \"$task_pre Barbados $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"VARY_PROPERTY_WHOLE_NUMBER_RANGE\", \"data\": { \"propertyToVary\": \"panField\", \"lowestVariationNumber\": 0, \"highestVariationNumber\": 8 } } }, \"data\": { \"zoom\": 102 } } } Process Load the two files from whereever you need to load them Use the interfaces ExerciseTemplateData and LearningGoalData Use LearningGoal.makeLearningGoalsFromDataDict() and ExerciseTemplate.makeExerciseTemplatesFromDataDict() to create the respective object arrays, LearningGoal[] and ExerciseTemplate[] Use LessonManager.generateLessons() (passing in both arrays) to generate the actual lesson data","title":"How to make lessons from json"},{"location":"how-to/how-to-make-lessons-from-json/#how-to-create-lessons-from-json-data-files","text":"","title":"How to Create Lessons from JSON data files"},{"location":"how-to/how-to-make-lessons-from-json/#assumptions","text":"You have learning goals represented in a well-structured JSON, such as this: { \"pitcairn-is.-main\": { \"name\": \"Know where Pitcairn Is. is\", \"isLesson\": true, \"associatedLearningGoals\": [ \"pitcairn-is.-1\" ], \"data\": { \"country\": \"Pitcairn Is.\" } }, \"pitcairn-is.-1\": { \"name\": \"Find Pitcairn Is. on the worldmap\", \"isLesson\": false, \"data\": { \"country\": \"Pitcairn Is.\" } }, \"barbados-main\": { \"name\": \"Know where Barbados is\", \"isLesson\": true, \"associatedLearningGoals\": [ \"barbados-1\", \"barbados-2\", \"barbados-3\" ], \"data\": { \"country\": \"Barbados\" } }, \"barbados-1\": { \"name\": \"Find Barbados on the worldmap\", \"isLesson\": false, \"data\": { \"country\": \"Barbados\" } } } You have exercise templates represented in a well-structured JSON which looks like this: { \"pitcairn-is.-1\": { \"belongsTo\": \"pitcairn-is.-1\", \"instruction\": \"$task_pre Pitcairn Is. $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"SINGLE\" } }, \"data\": { \"zoom\": 100 } }, \"barbados-1\": { \"belongsTo\": \"barbados-1\", \"instruction\": \"$task_pre Barbados $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"SINGLE\" } }, \"data\": { \"zoom\": 100 } }, \"barbados-2\": { \"belongsTo\": \"barbados-2\", \"instruction\": \"$task_pre Barbados $task_post\", \"templateType\": { \"method\": \"BY_INSTRUCTION\", \"generator\": { \"name\": \"VARY_PROPERTY_WHOLE_NUMBER_RANGE\", \"data\": { \"propertyToVary\": \"panField\", \"lowestVariationNumber\": 0, \"highestVariationNumber\": 8 } } }, \"data\": { \"zoom\": 102 } } }","title":"Assumptions"},{"location":"how-to/how-to-make-lessons-from-json/#process","text":"Load the two files from whereever you need to load them Use the interfaces ExerciseTemplateData and LearningGoalData Use LearningGoal.makeLearningGoalsFromDataDict() and ExerciseTemplate.makeExerciseTemplatesFromDataDict() to create the respective object arrays, LearningGoal[] and ExerciseTemplate[] Use LessonManager.generateLessons() (passing in both arrays) to generate the actual lesson data","title":"Process"},{"location":"reference/","text":"igu-algos v0.0.1 igu-algos v0.0.1 Classes ExerciseTemplate Igu LearningGoal Interfaces ExerciseTemplateData LearningGoalData","title":"Index"},{"location":"reference/#igu-algos-v001","text":"","title":"igu-algos v0.0.1"},{"location":"reference/#classes","text":"ExerciseTemplate Igu LearningGoal","title":"Classes"},{"location":"reference/#interfaces","text":"ExerciseTemplateData LearningGoalData","title":"Interfaces"},{"location":"reference/classes/ExerciseTemplate/","text":"igu-algos v0.0.1 igu-algos / ExerciseTemplate Class: ExerciseTemplate Represents a template for generating exercises with specific learning goals and generation strategies. Constructors Constructor new ExerciseTemplate ( id , belongsTo , generator , data? ): ExerciseTemplate Creates a new exercise template with specified configuration. Parameters id string Unique identifier for the template belongsTo LearningGoal The learning goal this template contributes to generator Generator The generator responsible for creating exercises from this template data? Optional data passed through Returns ExerciseTemplate Properties belongsTo readonly belongsTo : LearningGoal data? readonly optional data : object Index Signature [ key : string ]: unknown generator readonly generator : Generator id readonly id : string Methods makeExerciseTemplatesFromDataDict() static makeExerciseTemplatesFromDataDict ( dataDict , learningGoals ): ExerciseTemplate [] Creates multiple exercise templates from a dictionary of configuration data. Parameters dataDict learningGoals Map \\< string , LearningGoal > Returns ExerciseTemplate []","title":"ExerciseTemplate"},{"location":"reference/classes/ExerciseTemplate/#class-exercisetemplate","text":"Represents a template for generating exercises with specific learning goals and generation strategies.","title":"Class: ExerciseTemplate"},{"location":"reference/classes/ExerciseTemplate/#constructors","text":"","title":"Constructors"},{"location":"reference/classes/ExerciseTemplate/#constructor","text":"new ExerciseTemplate ( id , belongsTo , generator , data? ): ExerciseTemplate Creates a new exercise template with specified configuration.","title":"Constructor"},{"location":"reference/classes/ExerciseTemplate/#parameters","text":"","title":"Parameters"},{"location":"reference/classes/ExerciseTemplate/#id","text":"string Unique identifier for the template","title":"id"},{"location":"reference/classes/ExerciseTemplate/#belongsto","text":"LearningGoal The learning goal this template contributes to","title":"belongsTo"},{"location":"reference/classes/ExerciseTemplate/#generator","text":"Generator The generator responsible for creating exercises from this template","title":"generator"},{"location":"reference/classes/ExerciseTemplate/#data","text":"Optional data passed through","title":"data?"},{"location":"reference/classes/ExerciseTemplate/#returns","text":"ExerciseTemplate","title":"Returns"},{"location":"reference/classes/ExerciseTemplate/#properties","text":"","title":"Properties"},{"location":"reference/classes/ExerciseTemplate/#belongsto_1","text":"readonly belongsTo : LearningGoal","title":"belongsTo"},{"location":"reference/classes/ExerciseTemplate/#data_1","text":"readonly optional data : object","title":"data?"},{"location":"reference/classes/ExerciseTemplate/#index-signature","text":"[ key : string ]: unknown","title":"Index Signature"},{"location":"reference/classes/ExerciseTemplate/#generator_1","text":"readonly generator : Generator","title":"generator"},{"location":"reference/classes/ExerciseTemplate/#id_1","text":"readonly id : string","title":"id"},{"location":"reference/classes/ExerciseTemplate/#methods","text":"","title":"Methods"},{"location":"reference/classes/ExerciseTemplate/#makeexercisetemplatesfromdatadict","text":"static makeExerciseTemplatesFromDataDict ( dataDict , learningGoals ): ExerciseTemplate [] Creates multiple exercise templates from a dictionary of configuration data.","title":"makeExerciseTemplatesFromDataDict()"},{"location":"reference/classes/ExerciseTemplate/#parameters_1","text":"","title":"Parameters"},{"location":"reference/classes/ExerciseTemplate/#datadict","text":"","title":"dataDict"},{"location":"reference/classes/ExerciseTemplate/#learninggoals","text":"Map \\< string , LearningGoal >","title":"learningGoals"},{"location":"reference/classes/ExerciseTemplate/#returns_1","text":"ExerciseTemplate []","title":"Returns"},{"location":"reference/classes/Igu/","text":"igu-algos v0.0.1 igu-algos / Igu Class: Igu Main class for managing exercises and their scheduling. Constructors Constructor new Igu (): Igu Returns Igu Accessors exercisePool Get Signature get exercisePool (): Exercise [] Current collection of exercises available for review Returns Exercise [] Set Signature set exercisePool ( exercises ): void Updates the entire collection of available exercises Parameters exercises Exercise [] Returns void Methods addExercises() addExercises ( exercises ): void Adds new exercises to the exercise pool. Parameters exercises Exercise [] Returns void getRandomDueExercise() getRandomDueExercise (): undefined | Exercise Returns a random exercise that is due for review. Returns undefined | Exercise","title":"Igu"},{"location":"reference/classes/Igu/#class-igu","text":"Main class for managing exercises and their scheduling.","title":"Class: Igu"},{"location":"reference/classes/Igu/#constructors","text":"","title":"Constructors"},{"location":"reference/classes/Igu/#constructor","text":"new Igu (): Igu","title":"Constructor"},{"location":"reference/classes/Igu/#returns","text":"Igu","title":"Returns"},{"location":"reference/classes/Igu/#accessors","text":"","title":"Accessors"},{"location":"reference/classes/Igu/#exercisepool","text":"","title":"exercisePool"},{"location":"reference/classes/Igu/#get-signature","text":"get exercisePool (): Exercise [] Current collection of exercises available for review","title":"Get Signature"},{"location":"reference/classes/Igu/#returns_1","text":"Exercise []","title":"Returns"},{"location":"reference/classes/Igu/#set-signature","text":"set exercisePool ( exercises ): void Updates the entire collection of available exercises","title":"Set Signature"},{"location":"reference/classes/Igu/#parameters","text":"","title":"Parameters"},{"location":"reference/classes/Igu/#exercises","text":"Exercise []","title":"exercises"},{"location":"reference/classes/Igu/#returns_2","text":"void","title":"Returns"},{"location":"reference/classes/Igu/#methods","text":"","title":"Methods"},{"location":"reference/classes/Igu/#addexercises","text":"addExercises ( exercises ): void Adds new exercises to the exercise pool.","title":"addExercises()"},{"location":"reference/classes/Igu/#parameters_1","text":"","title":"Parameters"},{"location":"reference/classes/Igu/#exercises_1","text":"Exercise []","title":"exercises"},{"location":"reference/classes/Igu/#returns_3","text":"void","title":"Returns"},{"location":"reference/classes/Igu/#getrandomdueexercise","text":"getRandomDueExercise (): undefined | Exercise Returns a random exercise that is due for review.","title":"getRandomDueExercise()"},{"location":"reference/classes/Igu/#returns_4","text":"undefined | Exercise","title":"Returns"},{"location":"reference/classes/LearningGoal/","text":"igu-algos v0.0.1 igu-algos / LearningGoal Class: LearningGoal Represents a learning goal or lesson that can be associated with exercises and other learning goals. Constructors Constructor new LearningGoal ( id , name , isLesson , data? ): LearningGoal Creates a new learning goal instance. Parameters id string name string isLesson boolean data? Returns LearningGoal Properties data? readonly optional data : object Index Signature [ key : string ]: unknown id readonly id : string isLesson readonly isLesson : boolean name readonly name : string Accessors associatedLearningGoals Get Signature get associatedLearningGoals (): undefined | LearningGoal [] Gets the list of learning goals associated with this goal. Returns undefined | LearningGoal [] blockedBy Get Signature get blockedBy (): undefined | LearningGoal [] Gets the list of learning goals that block this goal. Returns undefined | LearningGoal [] Methods setAssociatedLearningGoals() setAssociatedLearningGoals ( goals ): void Sets the learning goals associated with this goal. Parameters goals LearningGoal [] Returns void setBlockedBy() setBlockedBy ( goals ): void Sets the learning goals that block this goal. Parameters goals LearningGoal [] Returns void makeLearningGoalsFromDataDict() static makeLearningGoalsFromDataDict ( dataDict ): LearningGoal [] Creates multiple learning goals from a dictionary of configuration data. Parameters dataDict Returns LearningGoal []","title":"LearningGoal"},{"location":"reference/classes/LearningGoal/#class-learninggoal","text":"Represents a learning goal or lesson that can be associated with exercises and other learning goals.","title":"Class: LearningGoal"},{"location":"reference/classes/LearningGoal/#constructors","text":"","title":"Constructors"},{"location":"reference/classes/LearningGoal/#constructor","text":"new LearningGoal ( id , name , isLesson , data? ): LearningGoal Creates a new learning goal instance.","title":"Constructor"},{"location":"reference/classes/LearningGoal/#parameters","text":"","title":"Parameters"},{"location":"reference/classes/LearningGoal/#id","text":"string","title":"id"},{"location":"reference/classes/LearningGoal/#name","text":"string","title":"name"},{"location":"reference/classes/LearningGoal/#islesson","text":"boolean","title":"isLesson"},{"location":"reference/classes/LearningGoal/#data","text":"","title":"data?"},{"location":"reference/classes/LearningGoal/#returns","text":"LearningGoal","title":"Returns"},{"location":"reference/classes/LearningGoal/#properties","text":"","title":"Properties"},{"location":"reference/classes/LearningGoal/#data_1","text":"readonly optional data : object","title":"data?"},{"location":"reference/classes/LearningGoal/#index-signature","text":"[ key : string ]: unknown","title":"Index Signature"},{"location":"reference/classes/LearningGoal/#id_1","text":"readonly id : string","title":"id"},{"location":"reference/classes/LearningGoal/#islesson_1","text":"readonly isLesson : boolean","title":"isLesson"},{"location":"reference/classes/LearningGoal/#name_1","text":"readonly name : string","title":"name"},{"location":"reference/classes/LearningGoal/#accessors","text":"","title":"Accessors"},{"location":"reference/classes/LearningGoal/#associatedlearninggoals","text":"","title":"associatedLearningGoals"},{"location":"reference/classes/LearningGoal/#get-signature","text":"get associatedLearningGoals (): undefined | LearningGoal [] Gets the list of learning goals associated with this goal.","title":"Get Signature"},{"location":"reference/classes/LearningGoal/#returns_1","text":"undefined | LearningGoal []","title":"Returns"},{"location":"reference/classes/LearningGoal/#blockedby","text":"","title":"blockedBy"},{"location":"reference/classes/LearningGoal/#get-signature_1","text":"get blockedBy (): undefined | LearningGoal [] Gets the list of learning goals that block this goal.","title":"Get Signature"},{"location":"reference/classes/LearningGoal/#returns_2","text":"undefined | LearningGoal []","title":"Returns"},{"location":"reference/classes/LearningGoal/#methods","text":"","title":"Methods"},{"location":"reference/classes/LearningGoal/#setassociatedlearninggoals","text":"setAssociatedLearningGoals ( goals ): void Sets the learning goals associated with this goal.","title":"setAssociatedLearningGoals()"},{"location":"reference/classes/LearningGoal/#parameters_1","text":"","title":"Parameters"},{"location":"reference/classes/LearningGoal/#goals","text":"LearningGoal []","title":"goals"},{"location":"reference/classes/LearningGoal/#returns_3","text":"void","title":"Returns"},{"location":"reference/classes/LearningGoal/#setblockedby","text":"setBlockedBy ( goals ): void Sets the learning goals that block this goal.","title":"setBlockedBy()"},{"location":"reference/classes/LearningGoal/#parameters_2","text":"","title":"Parameters"},{"location":"reference/classes/LearningGoal/#goals_1","text":"LearningGoal []","title":"goals"},{"location":"reference/classes/LearningGoal/#returns_4","text":"void","title":"Returns"},{"location":"reference/classes/LearningGoal/#makelearninggoalsfromdatadict","text":"static makeLearningGoalsFromDataDict ( dataDict ): LearningGoal [] Creates multiple learning goals from a dictionary of configuration data.","title":"makeLearningGoalsFromDataDict()"},{"location":"reference/classes/LearningGoal/#parameters_3","text":"","title":"Parameters"},{"location":"reference/classes/LearningGoal/#datadict","text":"","title":"dataDict"},{"location":"reference/classes/LearningGoal/#returns_5","text":"LearningGoal []","title":"Returns"},{"location":"reference/interfaces/ExerciseTemplateData/","text":"igu-algos v0.0.1 igu-algos / ExerciseTemplateData Interface: ExerciseTemplateData A type for ExerciseTemplate data represented as JSON (for file storage) Properties belongsTo belongsTo : LearningGoal data? optional data : object Index Signature [ key : string ]: unknown templateType templateType : object generator generator : object generator.data data : object generator.data.highestVariationNumber highestVariationNumber : number generator.data.lowestVariationNumber lowestVariationNumber : number generator.data.propertyToVary propertyToVary : string generator.name name : string","title":"ExerciseTemplateData"},{"location":"reference/interfaces/ExerciseTemplateData/#interface-exercisetemplatedata","text":"A type for ExerciseTemplate data represented as JSON (for file storage)","title":"Interface: ExerciseTemplateData"},{"location":"reference/interfaces/ExerciseTemplateData/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/ExerciseTemplateData/#belongsto","text":"belongsTo : LearningGoal","title":"belongsTo"},{"location":"reference/interfaces/ExerciseTemplateData/#data","text":"optional data : object","title":"data?"},{"location":"reference/interfaces/ExerciseTemplateData/#index-signature","text":"[ key : string ]: unknown","title":"Index Signature"},{"location":"reference/interfaces/ExerciseTemplateData/#templatetype","text":"templateType : object","title":"templateType"},{"location":"reference/interfaces/ExerciseTemplateData/#generator","text":"generator : object","title":"generator"},{"location":"reference/interfaces/ExerciseTemplateData/#generatordata","text":"data : object","title":"generator.data"},{"location":"reference/interfaces/ExerciseTemplateData/#generatordatahighestvariationnumber","text":"highestVariationNumber : number","title":"generator.data.highestVariationNumber"},{"location":"reference/interfaces/ExerciseTemplateData/#generatordatalowestvariationnumber","text":"lowestVariationNumber : number","title":"generator.data.lowestVariationNumber"},{"location":"reference/interfaces/ExerciseTemplateData/#generatordatapropertytovary","text":"propertyToVary : string","title":"generator.data.propertyToVary"},{"location":"reference/interfaces/ExerciseTemplateData/#generatorname","text":"name : string","title":"generator.name"},{"location":"reference/interfaces/LearningGoalData/","text":"igu-algos v0.0.1 igu-algos / LearningGoalData Interface: LearningGoalData Properties associatedLearningGoals? optional associatedLearningGoals : string [] blockedBy? optional blockedBy : string [] data? optional data : object Index Signature [ key : string ]: unknown isLesson isLesson : boolean name name : string","title":"LearningGoalData"},{"location":"reference/interfaces/LearningGoalData/#interface-learninggoaldata","text":"","title":"Interface: LearningGoalData"},{"location":"reference/interfaces/LearningGoalData/#properties","text":"","title":"Properties"},{"location":"reference/interfaces/LearningGoalData/#associatedlearninggoals","text":"optional associatedLearningGoals : string []","title":"associatedLearningGoals?"},{"location":"reference/interfaces/LearningGoalData/#blockedby","text":"optional blockedBy : string []","title":"blockedBy?"},{"location":"reference/interfaces/LearningGoalData/#data","text":"optional data : object","title":"data?"},{"location":"reference/interfaces/LearningGoalData/#index-signature","text":"[ key : string ]: unknown","title":"Index Signature"},{"location":"reference/interfaces/LearningGoalData/#islesson","text":"isLesson : boolean","title":"isLesson"},{"location":"reference/interfaces/LearningGoalData/#name","text":"name : string","title":"name"},{"location":"tutorials/quickstart/","text":"","title":"Quickstart"}]}